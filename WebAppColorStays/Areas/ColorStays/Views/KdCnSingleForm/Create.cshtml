@model WebAppColorStays.Models.ViewModel.CsKdCnSingleForm

@{
    Layout = "_Layout";
    ViewData["Action"] = "KdCnSingleForm";
}


<div class="PgLtRt10 DyFx FxAnImCr Wh100p BrRs15 Ht50">
    <div class="CrTeTtLt FxGw1"> <h1>Add @ViewBag.Title</h1></div>
    <div>
        <button class="BnCe35 HrTmSeo94 SwBx1Dv-Vn1"><i class="UT-List-OLine FtSz18" onclick="location.href='/ColorStays/KdCnSingleForm/Index'"></i></button>
    </div>
</div>

<div class="SwBx1Dv-Vn1 CrBdWe85 Pg7 BrRs15">
    <div class="FxRw FxAnImSh">
        <div class="Fx50 Pg3">
            <div class="BrTp3_Cr Br1_Cr BrRs10 CrBrTe CrBdTeBody Pg12">
                <h3 class="MnTp7 MnBm14 Br2_Cr BrRs4 CrBrWe TtAnCr Pg5 HrCrTe">
                    <i class="UT-PenNibSmall"></i>
                    Enter Detail
                </h3>
                 <form id="Create"
                    data-ajax="true"
                    data-ajax-url="/ColorStays/KdCnSingleForm/Create"
                    data-ajax-method="POST"
                    data-ajax-loading="#loader"
                    data-ajax-success="Success(data, status, xhr,'Create','CreateOrEdit')"
                    data-ajax-failure="FormAjaxFail(xhr, status, error,'Create')">

                    @Html.AntiForgeryToken()

                    <input type="hidden" name="NameAction" value="C" />

                    <div id="CreateOrEdit">@await Html.PartialAsync("_CreateOrEdit", Model)</div>

                    <div class="MnTp7 MnBm7 FxRw">
                        <div class="FxGw1">
                            <button type="submit" class="BnRd15 CrBdTeBnAd CrTtTeBnLt SwBxIt2TtBx-Vn1 HrTmSeo94"><i class="UT-AddFile"></i>&nbsp;Add</button>
                        </div>
                        <div>
                            <button type="button" class="BnRd15 CrBdTeBnCl CrTtTeBnLt SwBxIt1Dv-Vn1 HrTmSeo94" onclick="location.href='/ColorStays/KdCnSingleForm/Index'"><i class="UT-CancelCircleLine"></i>&nbsp;Cancel</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="Fx50 Pg3 FormSideView" id="FormSideView" style="overflow:auto">
            @await Html.PartialAsync("_IndexSearch", (IEnumerable<WebAppColorStays.Models.ViewModel.CsKdCnSingleForm>)ViewData["EnteredDetails"])
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        IntializeTableSearch();
        StartSuggestionBox(2, 'SearchCountry', '/ColorStays/Country/SuggestCountry', '', '', AoCeCountry);

    });

    //Clear Autocompete data
    function ClearData(UrNe, UrId) {
        document.getElementById(UrNe).value = '';
        document.getElementById(UrId).value = '';
    }

    //Autocomplete Country
    function AoCeCountry(event) {
        var InputId = event.target.InputID;
        SuggestionClose(InputId);
        document.getElementById('Fk_Country_Name').value = event.target.Id;
        document.getElementById(InputId).value = event.target.Value;
    }

    function AddPreState(containerId) {
        let button = document.getElementById("PrefixSeBn");
        let stateCounter = button.getAttribute("SePreBnVl");
        // Create main div
        let mainDiv = document.createElement("div");
        mainDiv.className = "MnTp7 MnBm7";
        mainDiv.id = `stateContainer-${stateCounter}`;

        // Create TtBxFlStDiv
        let inputWrapper = document.createElement("div");
        inputWrapper.className = "TtBxFlStDiv";

        // Create TtBxFlSt
        let inputContainer = document.createElement("div");
        inputContainer.className = "TtBxFlSt";

        // Create label
        let label = document.createElement("div");
        label.className = "TtBxFlStLl15";
        label.innerHTML = `State Name<span style='color:red;'> * </span>`;

        // Create text input
        let textInput = document.createElement("input");
        textInput.className = "TtBxTt14";
        textInput.type = "text";
        textInput.id = `SearchState1[${stateCounter}]`;
        textInput.name = `StateList1[${stateCounter}].Name`;
        textInput.placeholder = "State Name";
        textInput.autocomplete = "off";
        textInput.required = true;
        textInput.setAttribute("onchange", `ClearData('SearchState1[${stateCounter}]','SearchState1[${stateCounter}].Idtxt')`);

        // Create hidden input
        let hiddenInput = document.createElement("input");
        hiddenInput.type = "hidden";
        hiddenInput.id = `SearchState1[${stateCounter}].Idtxt`;
        hiddenInput.name = `StateList1[${ stateCounter }].Id`;
        hiddenInput.required = true;

        // Append elements
        inputContainer.appendChild(label);
        inputContainer.appendChild(textInput);
        inputContainer.appendChild(hiddenInput);
        inputWrapper.appendChild(inputContainer);
        mainDiv.appendChild(inputWrapper);

        // Create validation span wrapper
        let validationDiv = document.createElement("div");
        validationDiv.className = "VnRd";
        let validationSpan = document.createElement("span");
        validationSpan.id = `validation-StateList1[${ stateCounter }].Id`;
        validationDiv.appendChild(validationSpan);
        mainDiv.appendChild(validationDiv);

        // Create remove button
        const removeIcon = document.createElement("i");
        removeIcon.classList.add("UT-DeletePageSolid");
        removeIcon.onclick = function () {
            document.getElementById(`stateContainer-${stateCounter}`).remove();
            let currentValue = parseInt(button.getAttribute("SePreBnVl"), 10) || 0;
            let newValue = currentValue - 1;

            // Set the new value back to the attribute
            button.setAttribute("SePreBnVl", newValue);
        };

        inputContainer.appendChild(removeIcon);

        // Append to specified container

        document.getElementById(containerId).appendChild(mainDiv);
        StartSuggestionBox(2, `SearchState1[${stateCounter}]`, '/ColorStays/State/SuggestState', '', '', AoCeState);
        // Increment the value
        let currentValue = parseInt(button.getAttribute("SePreBnVl"), 10) || 0;
        let newValue = currentValue + 1;

        // Set the new value back to the attribute
        button.setAttribute("SePreBnVl", newValue);
    }

    function AddPreCity(containerId) {
        let button = document.getElementById("PrefixCyBn");
        let cityCounter = button.getAttribute("CyPreBnVl");
        // Create main div
        let mainDiv = document.createElement("div");
        mainDiv.className = "MnTp7 MnBm7";
        mainDiv.id = `cityContainer-${cityCounter}`;

        // Create TtBxFlStDiv
        let inputWrapper = document.createElement("div");
        inputWrapper.className = "TtBxFlStDiv";

        // Create TtBxFlSt
        let inputContainer = document.createElement("div");
        inputContainer.className = "TtBxFlSt";

        // Create label
        let label = document.createElement("div");
        label.className = "TtBxFlStLl15";
        label.innerHTML = `City Name<span style='color:red;'> * </span>`;

        // Create text input
        let textInput = document.createElement("input");
        textInput.className = "TtBxTt14";
        textInput.type = "text";
        textInput.id = `SearchCity1[${cityCounter}]`;
        textInput.name = `CityList1[${cityCounter}].Name`;
        textInput.placeholder = "City Name";
        textInput.autocomplete = "off";
        textInput.required = true;
        textInput.setAttribute("onchange", `ClearData('SearchCity1[${cityCounter}]','SearchCity1[${cityCounter}].Idtxt')`);

        // Create hidden input
        let hiddenInput = document.createElement("input");
        hiddenInput.type = "hidden";
        hiddenInput.id = `SearchCity1[${cityCounter}].Idtxt`;
        hiddenInput.name = `CityList1[${cityCounter}].Id`;
        hiddenInput.required = true;

        // Append elements
        inputContainer.appendChild(label);
        inputContainer.appendChild(textInput);
        inputContainer.appendChild(hiddenInput);
        inputWrapper.appendChild(inputContainer);
        mainDiv.appendChild(inputWrapper);

        // Create validation span wrapper
        let validationDiv = document.createElement("div");
        validationDiv.className = "VnRd";
        let validationSpan = document.createElement("span");
        validationSpan.id = `validation-CityList1[${cityCounter}].Id`;
        validationDiv.appendChild(validationSpan);
        mainDiv.appendChild(validationDiv);

        // Create remove button
        const removeIcon = document.createElement("i");
        removeIcon.classList.add("UT-DeletePageSolid");
        removeIcon.onclick = function () {
            document.getElementById(`cityContainer-${cityCounter}`).remove();
            let currentValue = parseInt(button.getAttribute("CyPreBnVl"), 10) || 0;
            let newValue = currentValue - 1;

            // Set the new value back to the attribute
            button.setAttribute("CyPreBnVl", newValue);
        };

        inputContainer.appendChild(removeIcon);

        // Append to specified container

        document.getElementById(containerId).appendChild(mainDiv);
        StartSuggestionBox(2, `SearchCity1[${cityCounter}]`, '/ColorStays/City/SuggestCity', '', '', AoCeCity);
        // Increment the value
        let currentValue = parseInt(button.getAttribute("CyPreBnVl"), 10) || 0;
        let newValue = currentValue + 1;

        // Set the new value back to the attribute
        button.setAttribute("CyPreBnVl", newValue);
    }

    function AddRootState(containerId) {
        let button = document.getElementById("RootSeBn");
        let stateCounter = button.getAttribute("SeRootBnVl");
        // Create main div
        let mainDiv = document.createElement("div");
        mainDiv.className = "MnTp7 MnBm7";
        mainDiv.id = `stateContainer-${stateCounter}`;

        // Create TtBxFlStDiv
        let inputWrapper = document.createElement("div");
        inputWrapper.className = "TtBxFlStDiv";

        // Create TtBxFlSt
        let inputContainer = document.createElement("div");
        inputContainer.className = "TtBxFlSt";

        // Create label
        let label = document.createElement("div");
        label.className = "TtBxFlStLl15";
        label.innerHTML = `State Name<span style='color:red;'> * </span>`;

        // Create text input
        let textInput = document.createElement("input");
        textInput.className = "TtBxTt14";
        textInput.type = "text";
        textInput.id = `SearchState2[${stateCounter}]`;
        textInput.name = `StateList2[${stateCounter}].Name`;
        textInput.placeholder = "State Name";
        textInput.autocomplete = "off";
        textInput.required = true;
        textInput.setAttribute("onchange", `ClearData('SearchState2[${stateCounter}]','SearchState2[${stateCounter}].Idtxt')`);

        // Create hidden input
        let hiddenInput = document.createElement("input");
        hiddenInput.type = "hidden";
        hiddenInput.id = `SearchState2[${stateCounter}].Idtxt`;
        hiddenInput.name = `StateList2[${ stateCounter }].Id`;
        hiddenInput.required = true;

        // Append elements
        inputContainer.appendChild(label);
        inputContainer.appendChild(textInput);
        inputContainer.appendChild(hiddenInput);
        inputWrapper.appendChild(inputContainer);
        mainDiv.appendChild(inputWrapper);

        // Create validation span wrapper
        let validationDiv = document.createElement("div");
        validationDiv.className = "VnRd";
        let validationSpan = document.createElement("span");
        validationSpan.id = `validation-StateList2[${ stateCounter }].Id`;
        validationDiv.appendChild(validationSpan);
        mainDiv.appendChild(validationDiv);

        // Create remove button
        const removeIcon = document.createElement("i");
        removeIcon.classList.add("UT-DeletePageSolid");
        removeIcon.onclick = function () {
            document.getElementById(`stateContainer-${stateCounter}`).remove();
            let currentValue = parseInt(button.getAttribute("SeRootBnVl"), 10) || 0;
            let newValue = currentValue - 1;

            // Set the new value back to the attribute
            button.setAttribute("SeRootBnVl", newValue);
        };

        inputContainer.appendChild(removeIcon);

        // Append to specified container

        document.getElementById(containerId).appendChild(mainDiv);
        StartSuggestionBox(2, `SearchState2[${stateCounter}]`, '/ColorStays/State/SuggestState', '', '', AoCeState);
        // Increment the value
        let currentValue = parseInt(button.getAttribute("SeRootBnVl"), 10) || 0;
        let newValue = currentValue + 1;

        // Set the new value back to the attribute
        button.setAttribute("SeRootBnVl", newValue);
    }

    function AddRootCity(containerId) {
        let button = document.getElementById("RootCyBn");
        let cityCounter = button.getAttribute("CyRootBnVl");
        // Create main div
        let mainDiv = document.createElement("div");
        mainDiv.className = "MnTp7 MnBm7";
        mainDiv.id = `cityContainer-${cityCounter}`;

        // Create TtBxFlStDiv
        let inputWrapper = document.createElement("div");
        inputWrapper.className = "TtBxFlStDiv";

        // Create TtBxFlSt
        let inputContainer = document.createElement("div");
        inputContainer.className = "TtBxFlSt";

        // Create label
        let label = document.createElement("div");
        label.className = "TtBxFlStLl15";
        label.innerHTML = `City Name<span style='color:red;'> * </span>`;

        // Create text input
        let textInput = document.createElement("input");
        textInput.className = "TtBxTt14";
        textInput.type = "text";
        textInput.id = `SearchCity2[${cityCounter}]`;
        textInput.name = `CityList2[${cityCounter}].Name`;
        textInput.placeholder = "City Name";
        textInput.autocomplete = "off";
        textInput.required = true;
        textInput.setAttribute("onchange", `ClearData('SearchCity2[${cityCounter}]','SearchCity2[${cityCounter}].Idtxt')`);

        // Create hidden input
        let hiddenInput = document.createElement("input");
        hiddenInput.type = "hidden";
        hiddenInput.id = `SearchCity2[${cityCounter}].Idtxt`;
        hiddenInput.name = `CityList2[${cityCounter}].Id`;
        hiddenInput.required = true;

        // Append elements
        inputContainer.appendChild(label);
        inputContainer.appendChild(textInput);
        inputContainer.appendChild(hiddenInput);
        inputWrapper.appendChild(inputContainer);
        mainDiv.appendChild(inputWrapper);

        // Create validation span wrapper
        let validationDiv = document.createElement("div");
        validationDiv.className = "VnRd";
        let validationSpan = document.createElement("span");
        validationSpan.id = `validation-CityList2[${cityCounter}].Id`;
        validationDiv.appendChild(validationSpan);
        mainDiv.appendChild(validationDiv);

        // Create remove button
        const removeIcon = document.createElement("i");
        removeIcon.classList.add("UT-DeletePageSolid");
        removeIcon.onclick = function () {
            document.getElementById(`cityContainer-${cityCounter}`).remove();
            let currentValue = parseInt(button.getAttribute("CyRootBnVl"), 10) || 0;
            let newValue = currentValue - 1;

            // Set the new value back to the attribute
            button.setAttribute("CyRootBnVl", newValue);
        };

        inputContainer.appendChild(removeIcon);

        // Append to specified container

        document.getElementById(containerId).appendChild(mainDiv);
        StartSuggestionBox(2, `SearchCity2[${cityCounter}]`, '/ColorStays/City/SuggestCity', '', '', AoCeCity);
        // Increment the value
        let currentValue = parseInt(button.getAttribute("CyRootBnVl"), 10) || 0;
        let newValue = currentValue + 1;

        // Set the new value back to the attribute
        button.setAttribute("CyRootBnVl", newValue);
    }

    function AddSufState(containerId) {
        let button = document.getElementById("SuffixSeBn");
        let stateCounter = button.getAttribute("SeSufBnVl");
        // Create main div
        let mainDiv = document.createElement("div");
        mainDiv.className = "MnTp7 MnBm7";
        mainDiv.id = `stateContainer-${stateCounter}`;

        // Create TtBxFlStDiv
        let inputWrapper = document.createElement("div");
        inputWrapper.className = "TtBxFlStDiv";

        // Create TtBxFlSt
        let inputContainer = document.createElement("div");
        inputContainer.className = "TtBxFlSt";

        // Create label
        let label = document.createElement("div");
        label.className = "TtBxFlStLl15";
        label.innerHTML = `State Name<span style='color:red;'> * </span>`;

        // Create text input
        let textInput = document.createElement("input");
        textInput.className = "TtBxTt14";
        textInput.type = "text";
        textInput.id = `SearchState3[${stateCounter}]`;
        textInput.name = `StateList3[${stateCounter}].Name`;
        textInput.placeholder = "State Name";
        textInput.autocomplete = "off";
        textInput.required = true;
        textInput.setAttribute("onchange", `ClearData('SearchState3[${stateCounter}]','SearchState3[${stateCounter}].Idtxt')`);

        // Create hidden input
        let hiddenInput = document.createElement("input");
        hiddenInput.type = "hidden";
        hiddenInput.id = `SearchState3[${stateCounter}].Idtxt`;
        hiddenInput.name = `StateList3[${ stateCounter }].Id`;
        hiddenInput.required = true;

        // Append elements
        inputContainer.appendChild(label);
        inputContainer.appendChild(textInput);
        inputContainer.appendChild(hiddenInput);
        inputWrapper.appendChild(inputContainer);
        mainDiv.appendChild(inputWrapper);

        // Create validation span wrapper
        let validationDiv = document.createElement("div");
        validationDiv.className = "VnRd";
        let validationSpan = document.createElement("span");
        validationSpan.id = `validation-StateList3[${ stateCounter }].Id`;
        validationDiv.appendChild(validationSpan);
        mainDiv.appendChild(validationDiv);

        // Create remove button
        const removeIcon = document.createElement("i");
        removeIcon.classList.add("UT-DeletePageSolid");
        removeIcon.onclick = function () {
            document.getElementById(`stateContainer-${stateCounter}`).remove();
            let currentValue = parseInt(button.getAttribute("SeSufBnVl"), 10) || 0;
            let newValue = currentValue - 1;

            // Set the new value back to the attribute
            button.setAttribute("SeSufBnVl", newValue);
        };

        inputContainer.appendChild(removeIcon);

        // Append to specified container

        document.getElementById(containerId).appendChild(mainDiv);
        StartSuggestionBox(2, `SearchState3[${stateCounter}]`, '/ColorStays/State/SuggestState', '', '', AoCeState);
        // Increment the value
        let currentValue = parseInt(button.getAttribute("SeSufBnVl"), 10) || 0;
        let newValue = currentValue + 1;

        // Set the new value back to the attribute
        button.setAttribute("SeSufBnVl", newValue);
    }

    function AddSufCity(containerId) {
        let button = document.getElementById("SuffixCyBn");
        let cityCounter = button.getAttribute("CySufBnVl");
        // Create main div
        let mainDiv = document.createElement("div");
        mainDiv.className = "MnTp7 MnBm7";
        mainDiv.id = `cityContainer-${cityCounter}`;

        // Create TtBxFlStDiv
        let inputWrapper = document.createElement("div");
        inputWrapper.className = "TtBxFlStDiv";

        // Create TtBxFlSt
        let inputContainer = document.createElement("div");
        inputContainer.className = "TtBxFlSt";

        // Create label
        let label = document.createElement("div");
        label.className = "TtBxFlStLl15";
        label.innerHTML = `City Name<span style='color:red;'> * </span>`;

        // Create text input
        let textInput = document.createElement("input");
        textInput.className = "TtBxTt14";
        textInput.type = "text";
        textInput.id = `SearchCity3[${cityCounter}]`;
        textInput.name = `CityList3[${cityCounter}].Name`;
        textInput.placeholder = "City Name";
        textInput.autocomplete = "off";
        textInput.required = true;
        textInput.setAttribute("onchange", `ClearData('SearchCity3[${cityCounter}]','SearchCity3[${cityCounter}].Idtxt')`);

        // Create hidden input
        let hiddenInput = document.createElement("input");
        hiddenInput.type = "hidden";
        hiddenInput.id = `SearchCity3[${cityCounter}].Idtxt`;
        hiddenInput.name = `CityList3[${cityCounter}].Id`;
        hiddenInput.required = true;

        // Append elements
        inputContainer.appendChild(label);
        inputContainer.appendChild(textInput);
        inputContainer.appendChild(hiddenInput);
        inputWrapper.appendChild(inputContainer);
        mainDiv.appendChild(inputWrapper);

        // Create validation span wrapper
        let validationDiv = document.createElement("div");
        validationDiv.className = "VnRd";
        let validationSpan = document.createElement("span");
        validationSpan.id = `validation-CityList3[${cityCounter}].Id`;
        validationDiv.appendChild(validationSpan);
        mainDiv.appendChild(validationDiv);

        // Create remove button
        const removeIcon = document.createElement("i");
        removeIcon.classList.add("UT-DeletePageSolid");
        removeIcon.onclick = function () {
            document.getElementById(`cityContainer-${cityCounter}`).remove();
            let currentValue = parseInt(button.getAttribute("CySufBnVl"), 10) || 0;
            let newValue = currentValue - 1;

            // Set the new value back to the attribute
            button.setAttribute("CySufBnVl", newValue);
        };

        inputContainer.appendChild(removeIcon);

        // Append to specified container

        document.getElementById(containerId).appendChild(mainDiv);
        StartSuggestionBox(2, `SearchCity3[${cityCounter}]`, '/ColorStays/City/SuggestCity', '', '', AoCeCity);
        // Increment the value
        let currentValue = parseInt(button.getAttribute("CySufBnVl"), 10) || 0;
        let newValue = currentValue + 1;

        // Set the new value back to the attribute
        button.setAttribute("CySufBnVl", newValue);
    }


    //Autocomplete Item
    function AoCeCity(event) {
        var InputId = event.target.InputID;
        SuggestionClose(InputId);
        var txt = InputId + '.Idtxt';
        document.getElementById(txt).value = event.target.Id;
        document.getElementById(InputId).value = event.target.Value;
    }
    //Autocomplete State
    function AoCeState(event) {
        var InputId = event.target.InputID;
        SuggestionClose(InputId);
        var txt = InputId + '.Idtxt';
        document.getElementById(txt).value = event.target.Id;
        document.getElementById(InputId).value = event.target.Value;
    }

    function Success(data, status, xhr, FormID, FormFieldID) {
        FormAjaxSuccess(data, FormID, FormFieldID, "UpdateDiv", "Def");
        //Here we get the pageno,pagesize and listcount
        var doc = new DOMParser().parseFromString(data, "text/html");
        var pageinfo = doc.getElementById("PaginationAt");
        var netrecord = pageinfo.getAttribute("netrecord");
        var pageno = pageinfo.getAttribute("pagenumber");
        var pagesize = pageinfo.getAttribute("PageSize");
        //Refresh the Pagination Div with new Values
        RefreshPagination('/ColorStays/KdCnSingleForm/Pagination?PgSelectedNum=' + pageno + '&PgSize=' + pagesize + '&SearchType=NoSearch&NetRecords=' + netrecord);
    }

    //Table Search Success Function
    function TableSuccessFn(data, status, xhr, FormID) {
        //This the SuccessFunction
        FormAjaxSuccess(data, FormID, '', "UpdateDivNoFReset", "Def");
        //Here we update the pageno,pagesize and listcount
        var doc = new DOMParser().parseFromString(data,"text/html");
        var pageinfo = doc.getElementById("PaginationAt");
        var netrecord = pageinfo.getAttribute("netrecord");
        var pageno = pageinfo.getAttribute("pagenumber");
        var pagesize = pageinfo.getAttribute("PageSize");
        //Refresh the Pagination Div with new Values
        RefreshPagination('/ColorStays/KdCnSingleForm/Pagination?PgSelectedNum=' + pageno + '&PgSize=' + pagesize + '&SearchType=TableSearch&NetRecords=' + netrecord);
    }

    function IntializeTableSearch() {
        var SkipRow = [0, 1];
        var SkipCol = [0];
        StartTableSearch('TeUT', SkipRow, SkipCol);
    }
</script>

